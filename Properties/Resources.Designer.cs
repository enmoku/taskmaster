//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Taskmaster.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Taskmaster.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 2019/08/11 07:30:34 Z 
        ///.
        /// </summary>
        internal static string BuildDate {
            get {
                return ResourceManager.GetString("BuildDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap ErrorIcon {
            get {
                object obj = ResourceManager.GetObject("ErrorIcon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\deflang2057{\fonttbl{\f0\fnil\fcharset0 Consolas;}}
        ///{\colortbl ;\red0\green0\blue0;\red0\green0\blue255;}
        ///{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\cf1\lang1035\f0\fs32 Third party licenses\fs28\par
        ///\par
        ///NAudio by Mark Heath (Ms-PL)\par
        ///\fs19\par
        ///\pard\li720 Microsoft Public License (Ms-PL)\par
        ///This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software.\ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ExternalLicenses {
            get {
                return ResourceManager.GetString("ExternalLicenses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap InfoIcon {
            get {
                object obj = ResourceManager.GetObject("InfoIcon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # DO NOT MODIFY THIS FILE
        ///# Add custom modules to Modules.User.ini
        ///#
        ///#[Unknown] # Reserved identity
        ///#
        ///
        ///[WxWidgets]
        ///files = {wxmsw}
        ///type = Interface
        ///open = yes
        ///
        ///[DirectSound]
        ///files = {dsound.dll}
        ///type = Audio
        ///listed = yes
        ///upgrade = XAudio
        ///
        ///[XAudio]
        ///files = {XAudio}
        ///type = Audio
        ///listed = yes
        ///
        ///[PhysX]
        ///files = {physx}
        ///type = Physics
        ///listed = yes
        ///proprietary = yes
        ///recommendation = change
        ///upgrade = any
        ///
        ///[XInput]
        ///files = {xinput}
        ///type = Controller
        ///listed = yes
        ///
        ///[DirectInput]
        ///files = {dinput}
        ///type = Controller
        ///list [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string KnownModules {
            get {
                return ResourceManager.GetString("KnownModules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MIT License (MIT)
        ///
        ///Author:
        ///		M.A. (https://github.com/mkahvi)
        ///
        ///Copyright (c) 2016-2019 M.A.
        ///
        ///Permission is hereby granted, free of charge, to any person obtaining a copy
        ///of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///in the Software without restriction, including without limitation the rights
        ///to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        ///copies of the Software, and to permit persons to whom the Software is
        ///furnished to do so, subject [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LICENSE {
            get {
                return ResourceManager.GetString("LICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap OkayIcon {
            get {
                object obj = ResourceManager.GetObject("OkayIcon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to C:\Users\Mayflower\Documents\Projects\TaskMaster\Taskmaster\ 
        ///.
        /// </summary>
        internal static string ProjectDirectory {
            get {
                return ResourceManager.GetString("ProjectDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # Default Configuration
        ///
        ///#[Human-readable Unique Name]
        ///#Image=executable.exe
        ///#Path = Partially matched full path, like G:\Games would match G:\Games\Game1\Game.exe and G:\GamesOnline\Game2\game.exe but not G:\More\Games...
        ///#Ignore = { launcher } # process names without extension to be ignored if Path is defined and no image is
        ///#Priority=2 # Process priority, 0 [low] to 4 [high], 2 = normal/Default
        ///#Priority strategy = 2 # 0 = Ignore/Unset, 1 = Increase only, 2 = Decrease only, 3 = Force/bidirectional
        ///#Allow [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Watchlist {
            get {
                return ResourceManager.GetString("Watchlist", resourceCulture);
            }
        }
    }
}
